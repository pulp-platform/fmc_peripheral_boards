
fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e74  08003e74  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e7c  08003e7c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000024  08003ea8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08003ea8  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f851  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  0002f8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00031858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00032960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad4f  00000000  00000000  00033970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ea2  00000000  00000000  0004e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ada58  00000000  00000000  00060561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dfb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0010e00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003e14 	.word	0x08003e14

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08003e14 	.word	0x08003e14

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fd44 	bl	8000f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f881 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 facd 	bl	8000a7c <MX_GPIO_Init>
  MX_I2C1_SMBUS_Init();
 80004e2:	f000 f8e9 	bl	80006b8 <MX_I2C1_SMBUS_Init>
  MX_SPI1_Init();
 80004e6:	f000 f929 	bl	800073c <MX_SPI1_Init>
  MX_TIM1_Init();
 80004ea:	f000 f965 	bl	80007b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ee:	f000 f9e9 	bl	80008c4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 fa63 	bl	80009bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 fa91 	bl	8000a1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t i=0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	71fb      	strb	r3, [r7, #7]
  uint8_t error=0;
 80004fe:	2300      	movs	r3, #0
 8000500:	71bb      	strb	r3, [r7, #6]
  memset(rx_buffer, 0, BUFFER_SIZE);
 8000502:	2210      	movs	r2, #16
 8000504:	2100      	movs	r1, #0
 8000506:	482f      	ldr	r0, [pc, #188]	; (80005c4 <main+0xf4>)
 8000508:	f003 fc7c 	bl	8003e04 <memset>
  memset(tx_buffer, 0, BUFFER_SIZE);
 800050c:	2210      	movs	r2, #16
 800050e:	2100      	movs	r1, #0
 8000510:	482d      	ldr	r0, [pc, #180]	; (80005c8 <main+0xf8>)
 8000512:	f003 fc77 	bl	8003e04 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while(i<BUFFER_SIZE)
 8000516:	e020      	b.n	800055a <main+0x8a>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==1)
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f001 f810 	bl	8001544 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d117      	bne.n	800055a <main+0x8a>
		{
			HAL_UART_Transmit(&huart2, st_buffer, SIZE, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	220a      	movs	r2, #10
 8000530:	4926      	ldr	r1, [pc, #152]	; (80005cc <main+0xfc>)
 8000532:	4827      	ldr	r0, [pc, #156]	; (80005d0 <main+0x100>)
 8000534:	f002 ff24 	bl	8003380 <HAL_UART_Transmit>
			HAL_Delay(10);
 8000538:	200a      	movs	r0, #10
 800053a:	f000 fd87 	bl	800104c <HAL_Delay>
			HAL_UART_Receive(&huart1, rx_buffer+i, 1, 10);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <main+0xf4>)
 8000542:	1899      	adds	r1, r3, r2
 8000544:	230a      	movs	r3, #10
 8000546:	2201      	movs	r2, #1
 8000548:	4822      	ldr	r0, [pc, #136]	; (80005d4 <main+0x104>)
 800054a:	f002 ffac 	bl	80034a6 <HAL_UART_Receive>
			i++;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	3301      	adds	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fd79 	bl	800104c <HAL_Delay>
	while(i<BUFFER_SIZE)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d9db      	bls.n	8000518 <main+0x48>
		}
	}

	i=0;
 8000560:	2300      	movs	r3, #0
 8000562:	71fb      	strb	r3, [r7, #7]
	while(i<BUFFER_SIZE)
 8000564:	e01b      	b.n	800059e <main+0xce>
	{
		//if(tx_buffer[i]!=rx_buffer[i]) error++;
		HAL_UART_Transmit(&huart1, rx_buffer+i, 1, 1000);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <main+0xf4>)
 800056a:	1899      	adds	r1, r3, r2
 800056c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000570:	2201      	movs	r2, #1
 8000572:	4818      	ldr	r0, [pc, #96]	; (80005d4 <main+0x104>)
 8000574:	f002 ff04 	bl	8003380 <HAL_UART_Transmit>
		i++;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	3301      	adds	r3, #1
 800057c:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==1) HAL_UART_Transmit(&huart2, pulp_buffer, SIZE, 1000);
 800057e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f000 ffdd 	bl	8001544 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d106      	bne.n	800059e <main+0xce>
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	220a      	movs	r2, #10
 8000596:	4910      	ldr	r1, [pc, #64]	; (80005d8 <main+0x108>)
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0x100>)
 800059a:	f002 fef1 	bl	8003380 <HAL_UART_Transmit>
	while(i<BUFFER_SIZE)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d9e0      	bls.n	8000566 <main+0x96>
	}

	HAL_UART_Transmit(&huart1, rx_buffer, BUFFER_SIZE, 1000);
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	2210      	movs	r2, #16
 80005aa:	4906      	ldr	r1, [pc, #24]	; (80005c4 <main+0xf4>)
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x104>)
 80005ae:	f002 fee7 	bl	8003380 <HAL_UART_Transmit>

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80005b2:	2102      	movs	r1, #2
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <main+0x10c>)
 80005b6:	f000 fff5 	bl	80015a4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fd46 	bl	800104c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80005c0:	e7f7      	b.n	80005b2 <main+0xe2>
 80005c2:	bf00      	nop
 80005c4:	2000029c 	.word	0x2000029c
 80005c8:	2000028c 	.word	0x2000028c
 80005cc:	20000000 	.word	0x20000000
 80005d0:	2000020c 	.word	0x2000020c
 80005d4:	2000018c 	.word	0x2000018c
 80005d8:	2000000c 	.word	0x2000000c
 80005dc:	48000400 	.word	0x48000400

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0a4      	sub	sp, #144	; 0x90
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fc08 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fbfa 	bl	8003e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000614:	f000 ffee 	bl	80015f4 <HAL_PWREx_ControlVoltageScaling>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800061e:	f000 fa81 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f823 	bl	80016a0 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000660:	f000 fa60 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067c:	2104      	movs	r1, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fc74 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068a:	f000 fa4b 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800068e:	2343      	movs	r3, #67	; 0x43
 8000690:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe69 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006ac:	f000 fa3a 	bl	8000b24 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3790      	adds	r7, #144	; 0x90
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <MX_I2C1_SMBUS_Init+0x7c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10909CEC;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006c4:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_I2C1_SMBUS_Init+0x80>)
 80006c6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000083D0;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 8000706:	f248 32d0 	movw	r2, #33744	; 0x83d0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 800070e:	f001 ffb9 	bl	8002684 <HAL_SMBUS_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000718:	f000 fa04 	bl	8000b24 <Error_Handler>
  }
  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_SMBUS_Init+0x78>)
 800071e:	f002 f869 	bl	80027f4 <HAL_SMBUS_EnableAlert_IT>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000728:	f000 f9fc 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000040 	.word	0x20000040
 8000734:	40005400 	.word	0x40005400
 8000738:	10909cec 	.word	0x10909cec

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_SPI1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000756:	f44f 7240 	mov.w	r2, #768	; 0x300
 800075a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x74>)
 800076a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x74>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000796:	2208      	movs	r2, #8
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_SPI1_Init+0x74>)
 800079c:	f002 f87d 	bl	800289a <HAL_SPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f9bd 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000090 	.word	0x20000090
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e4:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_TIM1_Init+0x104>)
 80007e6:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MX_TIM1_Init+0x108>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <MX_TIM1_Init+0x104>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b32      	ldr	r3, [pc, #200]	; (80008bc <MX_TIM1_Init+0x104>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_TIM1_Init+0x104>)
 80007f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <MX_TIM1_Init+0x104>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_TIM1_Init+0x104>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <MX_TIM1_Init+0x104>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <MX_TIM1_Init+0x104>)
 8000812:	f002 f8e5 	bl	80029e0 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800081c:	f000 f982 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	4619      	mov	r1, r3
 800082c:	4823      	ldr	r0, [pc, #140]	; (80008bc <MX_TIM1_Init+0x104>)
 800082e:	f002 fa23 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000838:	f000 f974 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800083c:	481f      	ldr	r0, [pc, #124]	; (80008bc <MX_TIM1_Init+0x104>)
 800083e:	f002 f926 	bl	8002a8e <HAL_TIM_IC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000848:	f000 f96c 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4817      	ldr	r0, [pc, #92]	; (80008bc <MX_TIM1_Init+0x104>)
 8000860:	f002 fcda 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800086a:	f000 f95b 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000872:	2301      	movs	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM1_Init+0x104>)
 8000886:	f002 f963 	bl	8002b50 <HAL_TIM_IC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000890:	f000 f948 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000894:	2302      	movs	r3, #2
 8000896:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000898:	2302      	movs	r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM1_Init+0x104>)
 80008a4:	f002 f954 	bl	8002b50 <HAL_TIM_IC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008ae:	f000 f939 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000f4 	.word	0x200000f4
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <MX_TIM2_Init+0xf4>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MX_TIM2_Init+0xf4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_TIM2_Init+0xf4>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000918:	4827      	ldr	r0, [pc, #156]	; (80009b8 <MX_TIM2_Init+0xf4>)
 800091a:	f002 f861 	bl	80029e0 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000924:	f000 f8fe 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	4619      	mov	r1, r3
 8000934:	4820      	ldr	r0, [pc, #128]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000936:	f002 f99f 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000940:	f000 f8f0 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000946:	f002 f8a2 	bl	8002a8e <HAL_TIM_IC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 f8e8 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4815      	ldr	r0, [pc, #84]	; (80009b8 <MX_TIM2_Init+0xf4>)
 8000964:	f002 fc58 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800096e:	f000 f8d9 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_TIM2_Init+0xf4>)
 800098a:	f002 f8e1 	bl	8002b50 <HAL_TIM_IC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000994:	f000 f8c6 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2204      	movs	r2, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_TIM2_Init+0xf4>)
 80009a0:	f002 f8d6 	bl	8002b50 <HAL_TIM_IC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80009aa:	f000 f8bb 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000140 	.word	0x20000140

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART1_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_USART1_UART_Init+0x58>)
 8000a02:	f002 fc6f 	bl	80032e4 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000a0c:	f000 f88a 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000018c 	.word	0x2000018c
 8000a18:	40013800 	.word	0x40013800

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <MX_USART2_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a60:	f002 fc40 	bl	80032e4 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f85b 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xa0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f000 fd53 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0xa4>)
 8000ad4:	f000 fd4e 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f000 fbb5 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0xa4>)
 8000b0e:	f000 fba7 	bl	8001260 <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6613      	str	r3, [r2, #96]	; 0x60
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_SMBUS_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d127      	bne.n	8000bea <HAL_SMBUS_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bb2:	23e0      	movs	r3, #224	; 0xe0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <HAL_SMBUS_MspInit+0x84>)
 8000bce:	f000 fb47 	bl	8001260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_SMBUS_MspInit+0x80>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_SPI_MspInit+0x7c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d128      	bne.n	8000c74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	23e0      	movs	r3, #224	; 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 faf6 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <HAL_TIM_Base_MspInit+0xdc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12a      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fab3 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cfa:	e02d      	b.n	8000d58 <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d128      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_TIM_Base_MspInit+0xe0>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f000 fa84 	bl	8001260 <HAL_GPIO_Init>
}
 8000d58:	bf00      	nop
 8000d5a:	3730      	adds	r7, #48	; 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40012c00 	.word	0x40012c00
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a2f      	ldr	r2, [pc, #188]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12a      	bne.n	8000de0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dba:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f000 fa41 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dde:	e02d      	b.n	8000e3c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0xe4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d128      	bne.n	8000e3c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6593      	str	r3, [r2, #88]	; 0x58
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f000 fa12 	bl	8001260 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40004400 	.word	0x40004400

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f8b6 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <SystemInit+0x64>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <SystemInit+0x64>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <SystemInit+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <SystemInit+0x68>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <SystemInit+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <SystemInit+0x68>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <SystemInit+0x68>)
 8000ed0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ed4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <SystemInit+0x68>)
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <SystemInit+0x68>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <SystemInit+0x68>)
 8000ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <SystemInit+0x68>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SystemInit+0x64>)
 8000ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efa:	609a      	str	r2, [r3, #8]
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	40021000 	.word	0x40021000

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ffc6 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f1a:	e003      	b.n	8000f24 <LoopCopyDataInit>

08000f1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f22:	3104      	adds	r1, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f2c:	d3f6      	bcc.n	8000f1c <CopyDataInit>
	ldr	r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f30:	e002      	b.n	8000f38 <LoopFillZerobss>

08000f32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f34:	f842 3b04 	str.w	r3, [r2], #4

08000f38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <LoopForever+0x16>)
	cmp	r2, r3
 8000f3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f3c:	d3f9      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f002 ff3d 	bl	8003dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fac5 	bl	80004d0 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000f4c:	08003e84 	.word	0x08003e84
	ldr	r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f54:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000f58:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000f5c:	200002b0 	.word	0x200002b0

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>

08000f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f943 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f80e 	bl	8000f94 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	e001      	b.n	8000f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f84:	f7ff fdd4 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d023      	beq.n	8000ff0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_InitTick+0x70>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_InitTick+0x6c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f941 	bl	8001246 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10f      	bne.n	8000fea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d809      	bhi.n	8000fe4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f919 	bl	800120e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_InitTick+0x74>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e007      	b.n	8000ff4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e004      	b.n	8000ff4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e001      	b.n	8000ff4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000020 	.word	0x20000020
 8001004:	20000018 	.word	0x20000018
 8001008:	2000001c 	.word	0x2000001c

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000020 	.word	0x20000020
 8001030:	200002ac 	.word	0x200002ac

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200002ac 	.word	0x200002ac

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000020 	.word	0x20000020

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff47 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff5c 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb0 	bl	80011b4 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e14e      	b.n	800150e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8140 	beq.w	8001508 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d00b      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	2b11      	cmp	r3, #17
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b12      	cmp	r3, #18
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0xea>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d123      	bne.n	8001392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0203 	and.w	r2, r3, #3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 809a 	beq.w	8001508 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b55      	ldr	r3, [pc, #340]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	4a54      	ldr	r2, [pc, #336]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6613      	str	r3, [r2, #96]	; 0x60
 80013e0:	4b52      	ldr	r3, [pc, #328]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1e0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a46      	ldr	r2, [pc, #280]	; (8001534 <HAL_GPIO_Init+0x2d4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1dc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a45      	ldr	r2, [pc, #276]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1d8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a44      	ldr	r2, [pc, #272]	; (800153c <HAL_GPIO_Init+0x2dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1d4>
 8001430:	2303      	movs	r3, #3
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001434:	2307      	movs	r3, #7
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001440:	2300      	movs	r3, #0
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001452:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f aea9 	bne.w	8001270 <HAL_GPIO_Init+0x10>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	48000c00 	.word	0x48000c00
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e002      	b.n	8001598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43d9      	mvns	r1, r3
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	400b      	ands	r3, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001602:	d130      	bne.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d038      	beq.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2232      	movs	r2, #50	; 0x32
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9b      	lsrs	r3, r3, #18
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001638:	e002      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164c:	d102      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x60>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f2      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d110      	bne.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e00f      	b.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d007      	beq.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40007000 	.word	0x40007000
 8001698:	20000018 	.word	0x20000018
 800169c:	431bde83 	.word	0x431bde83

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f000 bc53 	b.w	8001f5a <HAL_RCC_OscConfig+0x8ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016be:	4b95      	ldr	r3, [pc, #596]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80e6 	beq.w	80018a2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <HAL_RCC_OscConfig+0x4c>
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	f040 808d 	bne.w	80017fe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	f040 8089 	bne.w	80017fe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ec:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_RCC_OscConfig+0x66>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f000 bc2a 	b.w	8001f5a <HAL_RCC_OscConfig+0x8ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <HAL_RCC_OscConfig+0x80>
 8001716:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171e:	e005      	b.n	800172c <HAL_RCC_OscConfig+0x8c>
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800172c:	4293      	cmp	r3, r2
 800172e:	d224      	bcs.n	800177a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fdbf 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	f000 bc0a 	b.w	8001f5a <HAL_RCC_OscConfig+0x8ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a72      	ldr	r2, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	496d      	ldr	r1, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	4968      	ldr	r1, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e025      	b.n	80017c6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	4960      	ldr	r1, [pc, #384]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001798:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	495b      	ldr	r1, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fd7e 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e3c9      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c6:	f000 fcb3 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4950      	ldr	r1, [pc, #320]	; (8001918 <HAL_RCC_OscConfig+0x278>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_RCC_OscConfig+0x27c>)
 80017e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fbd2 	bl	8000f94 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d052      	beq.n	80018a0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	e3ad      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d032      	beq.n	800186c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a42      	ldr	r2, [pc, #264]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001812:	f7ff fc0f 	bl	8001034 <HAL_GetTick>
 8001816:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181a:	f7ff fc0b 	bl	8001034 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e396      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	4930      	ldr	r1, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	492b      	ldr	r1, [pc, #172]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e01a      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001878:	f7ff fbdc 	bl	8001034 <HAL_GetTick>
 800187c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001880:	f7ff fbd8 	bl	8001034 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e363      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1e0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d073      	beq.n	8001996 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d10e      	bne.n	80018d8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d063      	beq.n	8001994 <HAL_RCC_OscConfig+0x2f4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d15f      	bne.n	8001994 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e340      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x250>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e025      	b.n	800193c <HAL_RCC_OscConfig+0x29c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d114      	bne.n	8001924 <HAL_RCC_OscConfig+0x284>
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a02      	ldr	r2, [pc, #8]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x29c>
 8001914:	40021000 	.word	0x40021000
 8001918:	08003e2c 	.word	0x08003e2c
 800191c:	20000018 	.word	0x20000018
 8001920:	2000001c 	.word	0x2000001c
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a8b      	ldr	r2, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb76 	bl	8001034 <HAL_GetTick>
 8001948:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fb72 	bl	8001034 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e2fd      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x2ac>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fb62 	bl	8001034 <HAL_GetTick>
 8001970:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fb5e 	bl	8001034 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e2e9      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001986:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x2d4>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d060      	beq.n	8001a64 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x314>
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d119      	bne.n	80019e2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d116      	bne.n	80019e2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x32c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e2c6      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	4962      	ldr	r1, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	e040      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d023      	beq.n	8001a32 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb1d 	bl	8001034 <HAL_GetTick>
 80019fa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fb19 	bl	8001034 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e2a4      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	494e      	ldr	r1, [pc, #312]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e018      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff faf9 	bl	8001034 <HAL_GetTick>
 8001a42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff faf5 	bl	8001034 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e280      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8082 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d05f      	beq.n	8001b3a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d037      	beq.n	8001b00 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e258      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01b      	beq.n	8001aea <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac2:	f7ff fab7 	bl	8001034 <HAL_GetTick>
 8001ac6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fab3 	bl	8001034 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b11      	cmp	r3, #17
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e23e      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f023 0210 	bic.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	491a      	ldr	r1, [pc, #104]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa90 	bl	8001034 <HAL_GetTick>
 8001b14:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa8c 	bl	8001034 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e217      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCC_OscConfig+0x478>
 8001b38:	e01d      	b.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa73 	bl	8001034 <HAL_GetTick>
 8001b4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fa6f 	bl	8001034 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	d903      	bls.n	8001b68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1fa      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
 8001b64:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	4ba9      	ldr	r3, [pc, #676]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ed      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80bd 	beq.w	8001cfe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b8a:	4ba1      	ldr	r3, [pc, #644]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b9e      	ldr	r3, [pc, #632]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a9d      	ldr	r2, [pc, #628]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b9b      	ldr	r3, [pc, #620]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb4:	4b97      	ldr	r3, [pc, #604]	; (8001e14 <HAL_RCC_OscConfig+0x774>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d118      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <HAL_RCC_OscConfig+0x774>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a93      	ldr	r2, [pc, #588]	; (8001e14 <HAL_RCC_OscConfig+0x774>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fa32 	bl	8001034 <HAL_GetTick>
 8001bd0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd4:	f7ff fa2e 	bl	8001034 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1b9      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x774>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d02c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001bfe:	4b84      	ldr	r3, [pc, #528]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	497f      	ldr	r1, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c24:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c34:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c44:	e018      	b.n	8001c78 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	4a70      	ldr	r2, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c58:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f9d8 	bl	8001034 <HAL_GetTick>
 8001c84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff f9d4 	bl	8001034 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e15d      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ed      	beq.n	8001c88 <HAL_RCC_OscConfig+0x5e8>
 8001cac:	e01d      	b.n	8001cea <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff f9c1 	bl	8001034 <HAL_GetTick>
 8001cb2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff f9bd 	bl	8001034 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e146      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ed      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d105      	bne.n	8001cfe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d18:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff f987 	bl	8001034 <HAL_GetTick>
 8001d26:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d2a:	f7ff f983 	bl	8001034 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e10e      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0ef      	beq.n	8001d2a <HAL_RCC_OscConfig+0x68a>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96a 	bl	8001034 <HAL_GetTick>
 8001d60:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f966 	bl	8001034 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0f1      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ef      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80e5 	beq.w	8001f58 <HAL_RCC_OscConfig+0x8b8>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	f040 80b5 	bne.w	8001f02 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d124      	bne.n	8001df6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	3b01      	subs	r3, #1
 8001db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d11b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d113      	bne.n	8001df6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d05f      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d05a      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_OscConfig+0x770>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7ff f914 	bl	8001034 <HAL_GetTick>
 8001e0c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e00c      	b.n	8001e2a <HAL_RCC_OscConfig+0x78a>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f90c 	bl	8001034 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e097      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x778>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x8c8>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e50:	0212      	lsls	r2, r2, #8
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e58:	0852      	lsrs	r2, r2, #1
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	0552      	lsls	r2, r2, #21
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e64:	0852      	lsrs	r2, r2, #1
 8001e66:	3a01      	subs	r2, #1
 8001e68:	0652      	lsls	r2, r2, #25
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	493d      	ldr	r1, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4a38      	ldr	r2, [pc, #224]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e88:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e8a:	f7ff f8d3 	bl	8001034 <HAL_GetTick>
 8001e8e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff f8cf 	bl	8001034 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e05a      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb0:	e052      	b.n	8001f58 <HAL_RCC_OscConfig+0x8b8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e051      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d14a      	bne.n	8001f58 <HAL_RCC_OscConfig+0x8b8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ecc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eda:	f7ff f8ab 	bl	8001034 <HAL_GetTick>
 8001ede:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f8a7 	bl	8001034 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x842>
 8001f00:	e02a      	b.n	8001f58 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d025      	beq.n	8001f54 <HAL_RCC_OscConfig+0x8b4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f2a:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f882 	bl	8001034 <HAL_GetTick>
 8001f30:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x8a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f87e 	bl	8001034 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x8a6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCC_OscConfig+0x8c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x894>
 8001f52:	e001      	b.n	8001f58 <HAL_RCC_OscConfig+0x8b8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x8ba>
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	f99f808c 	.word	0xf99f808c

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4961      	ldr	r1, [pc, #388]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b5f      	ldr	r3, [pc, #380]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d04c      	beq.n	8002056 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc4:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d121      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e09e      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d115      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e092      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e086      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e07e      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	493f      	ldr	r1, [pc, #252]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002026:	f7ff f805 	bl	8001034 <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202c:	e00a      	b.n	8002044 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff f801 	bl	8001034 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e066      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 020c 	and.w	r2, r3, #12
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	429a      	cmp	r2, r3
 8002054:	d1eb      	bne.n	800202e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	492c      	ldr	r1, [pc, #176]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d210      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4924      	ldr	r1, [pc, #144]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e036      	b.n	8002112 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4918      	ldr	r1, [pc, #96]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4910      	ldr	r1, [pc, #64]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e2:	f000 f825 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490c      	ldr	r1, [pc, #48]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff44 	bl	8000f94 <HAL_InitTick>
 800210c:	4603      	mov	r3, r0
 800210e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002110:	7afb      	ldrb	r3, [r7, #11]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08003e2c 	.word	0x08003e2c
 8002128:	20000018 	.word	0x20000018
 800212c:	2000001c 	.word	0x2000001c

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11e      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800218c:	4a2b      	ldr	r2, [pc, #172]	; (800223c <HAL_RCC_GetSysClockFreq+0x10c>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e004      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d134      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0xac>
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021de:	617b      	str	r3, [r7, #20]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	617b      	str	r3, [r7, #20]
      break;
 80021e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	3301      	adds	r3, #1
 80021f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0e5b      	lsrs	r3, r3, #25
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	3301      	adds	r3, #1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002228:	69bb      	ldr	r3, [r7, #24]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	08003e44 	.word	0x08003e44
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000018 	.word	0x20000018

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08003e3c 	.word	0x08003e3c

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002290:	f7ff ffda 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003e3c 	.word	0x08003e3c

080022b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f982 	bl	80015d8 <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
 80022d6:	e014      	b.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f972 	bl	80015d8 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002308:	d10b      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d919      	bls.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2ba0      	cmp	r3, #160	; 0xa0
 8002314:	d902      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e013      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e010      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d902      	bls.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002328:	2303      	movs	r3, #3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e00a      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d102      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e004      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b70      	cmp	r3, #112	; 0x70
 800233e:	d101      	bne.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0207 	bic.w	r2, r3, #7
 800234c:	4909      	ldr	r1, [pc, #36]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002380:	2300      	movs	r3, #0
 8002382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002384:	2300      	movs	r3, #0
 8002386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 809e 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6593      	str	r3, [r2, #88]	; 0x58
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fe2c 	bl	8001034 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023de:	e009      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fe28 	bl	8001034 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d902      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	74fb      	strb	r3, [r7, #19]
        break;
 80023f2:	e005      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d15a      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01e      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	429a      	cmp	r2, r3
 8002420:	d019      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800244e:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fde8 	bl	8001034 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	e00b      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fde4 	bl	8001034 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d902      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	74fb      	strb	r3, [r7, #19]
            break;
 800247e:	e006      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ec      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4904      	ldr	r1, [pc, #16]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024aa:	e009      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c0:	7c7b      	ldrb	r3, [r7, #17]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024de:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f023 0203 	bic.w	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4964      	ldr	r1, [pc, #400]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 020c 	bic.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	495c      	ldr	r1, [pc, #368]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4953      	ldr	r1, [pc, #332]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002544:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	494b      	ldr	r1, [pc, #300]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4942      	ldr	r1, [pc, #264]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	493a      	ldr	r1, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4931      	ldr	r1, [pc, #196]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4929      	ldr	r1, [pc, #164]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4920      	ldr	r1, [pc, #128]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	4918      	ldr	r1, [pc, #96]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002666:	d105      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002674:	7cbb      	ldrb	r3, [r7, #18]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0aa      	b.n	80027ec <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fa66 	bl	8000b78 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026de:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026ee:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026f8:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002708:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e006      	b.n	8002738 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002736:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d104      	bne.n	800274a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	ea42 0103 	orr.w	r1, r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	021a      	lsls	r2, r3, #8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	ea42 0103 	orr.w	r1, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a4:	d110      	bne.n	80027c8 <HAL_SMBUS_Init+0x144>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_SMBUS_Init+0x134>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b6:	d107      	bne.n	80027c8 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800280a:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002814:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f805 	bl	8002828 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002846:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284e:	2b38      	cmp	r3, #56	; 0x38
 8002850:	d103      	bne.n	800285a <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002860:	2bf2      	cmp	r3, #242	; 0xf2
 8002862:	d103      	bne.n	800286c <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8002872:	2bd4      	cmp	r3, #212	; 0xd4
 8002874:	d103      	bne.n	800287e <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800287c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e095      	b.n	80029d8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028bc:	d009      	beq.n	80028d2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
 80028c4:	e005      	b.n	80028d2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7fe f987 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002908:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002912:	d902      	bls.n	800291a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e002      	b.n	8002920 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800291a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002928:	d007      	beq.n	800293a <HAL_SPI_Init+0xa0>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002932:	d002      	beq.n	800293a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	f003 0204 	and.w	r2, r3, #4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029b6:	ea42 0103 	orr.w	r1, r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e049      	b.n	8002a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f93c 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 f9f0 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e049      	b.n	8002b34 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f841 	bl	8002b3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f000 f999 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e082      	b.n	8002c70 <HAL_TIM_IC_ConfigChannel+0x120>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 f9a0 	bl	8002ecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020c 	bic.w	r2, r2, #12
 8002b9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e05a      	b.n	8002c66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f000 fa06 	bl	8002fd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6999      	ldr	r1, [r3, #24]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	021a      	lsls	r2, r3, #8
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	619a      	str	r2, [r3, #24]
 8002bee:	e03a      	b.n	8002c66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11b      	bne.n	8002c2e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f000 fa53 	bl	80030b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020c 	bic.w	r2, r2, #12
 8002c18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	61da      	str	r2, [r3, #28]
 8002c2c:	e01b      	b.n	8002c66 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f000 fa73 	bl	8003128 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIM_ConfigClockSource+0x18>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0b5      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d03e      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xd4>
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	f200 8087 	bhi.w	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	f000 8085 	beq.w	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce2:	d87f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b70      	cmp	r3, #112	; 0x70
 8002ce6:	d01a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ce8:	2b70      	cmp	r3, #112	; 0x70
 8002cea:	d87b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b60      	cmp	r3, #96	; 0x60
 8002cee:	d050      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x11a>
 8002cf0:	2b60      	cmp	r3, #96	; 0x60
 8002cf2:	d877      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b50      	cmp	r3, #80	; 0x50
 8002cf6:	d03c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xfa>
 8002cf8:	2b50      	cmp	r3, #80	; 0x50
 8002cfa:	d873      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d058      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d86f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b30      	cmp	r3, #48	; 0x30
 8002d06:	d064      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d08:	2b30      	cmp	r3, #48	; 0x30
 8002d0a:	d86b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d060      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d867      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05c      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d05a      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d1c:	e062      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f000 fa53 	bl	80031d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
      break;
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f000 fa3c 	bl	80031d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6e:	609a      	str	r2, [r3, #8]
      break;
 8002d70:	e03b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f8fa 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2150      	movs	r1, #80	; 0x50
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fa09 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e02b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f956 	bl	8003050 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2160      	movs	r1, #96	; 0x60
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f9f9 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e01b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 f8da 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2140      	movs	r1, #64	; 0x40
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f9e9 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f000 f9e0 	bl	80031a2 <TIM_ITRx_SetConfig>
        break;
 8002de2:	e002      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002de8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0x20>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d108      	bne.n	8002e36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d007      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x52>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <TIM_Base_SetConfig+0xc4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d108      	bne.n	8002e68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <TIM_Base_SetConfig+0xa0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_Base_SetConfig+0xa0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <TIM_Base_SetConfig+0xc4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400

08002ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <TIM_TI1_SetConfig+0xa4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_TI1_SetConfig+0x3e>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d003      	beq.n	8002f0a <TIM_TI1_SetConfig+0x3e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <TIM_TI1_SetConfig+0xa8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <TIM_TI1_SetConfig+0x42>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <TIM_TI1_SetConfig+0x44>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e003      	b.n	8002f2e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 030a 	bic.w	r3, r3, #10
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 030a 	and.w	r3, r3, #10
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40014000 	.word	0x40014000

08002f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 030a 	bic.w	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 0210 	bic.w	r2, r3, #16
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003002:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	b29b      	uxth	r3, r3
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f023 0210 	bic.w	r2, r3, #16
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800308c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0303 	bic.w	r3, r3, #3
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	621a      	str	r2, [r3, #32]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003166:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	031b      	lsls	r3, r3, #12
 800316c:	b29b      	uxth	r3, r3
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800317a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	031b      	lsls	r3, r3, #12
 8003180:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 0307 	orr.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e04f      	b.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003260:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d004      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10c      	bne.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40014000 	.word	0x40014000

080032e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e040      	b.n	8003378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fd2e 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	; 0x24
 8003310:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f98c 	bl	8003640 <UART_SetConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fbdc 	bl	8003af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fc63 	bl	8003c3c <UART_CheckIdleState>
 8003376:	4603      	mov	r3, r0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	2b20      	cmp	r3, #32
 8003396:	f040 8081 	bne.w	800349c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_UART_Transmit+0x26>
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e079      	b.n	800349e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit+0x38>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e072      	b.n	800349e <HAL_UART_Transmit+0x11e>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2221      	movs	r2, #33	; 0x21
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd fe32 	bl	8001034 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	d108      	bne.n	80033fe <HAL_UART_Transmit+0x7e>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e003      	b.n	8003406 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800340e:	e02d      	b.n	800346c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fc53 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e039      	b.n	800349e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800343c:	b292      	uxth	r2, r2
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	3302      	adds	r3, #2
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e008      	b.n	800345a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b292      	uxth	r2, r2
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3301      	adds	r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1cb      	bne.n	8003410 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fc1f 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e005      	b.n	800349e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	f040 80bb 	bne.w	8003636 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Receive+0x26>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b3      	b.n	8003638 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_UART_Receive+0x38>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0ac      	b.n	8003638 <HAL_UART_Receive+0x192>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2222      	movs	r2, #34	; 0x22
 80034f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034f2:	f7fd fd9f 	bl	8001034 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d10e      	bne.n	8003530 <HAL_UART_Receive+0x8a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_UART_Receive+0x80>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003524:	e02d      	b.n	8003582 <HAL_UART_Receive+0xdc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800352e:	e028      	b.n	8003582 <HAL_UART_Receive+0xdc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_UART_Receive+0xae>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <HAL_UART_Receive+0xa4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003548:	e01b      	b.n	8003582 <HAL_UART_Receive+0xdc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	227f      	movs	r2, #127	; 0x7f
 800354e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003552:	e016      	b.n	8003582 <HAL_UART_Receive+0xdc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800355c:	d10d      	bne.n	800357a <HAL_UART_Receive+0xd4>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_UART_Receive+0xca>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	227f      	movs	r2, #127	; 0x7f
 800356a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800356e:	e008      	b.n	8003582 <HAL_UART_Receive+0xdc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	223f      	movs	r2, #63	; 0x3f
 8003574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003578:	e003      	b.n	8003582 <HAL_UART_Receive+0xdc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003588:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d108      	bne.n	80035a6 <HAL_UART_Receive+0x100>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e003      	b.n	80035ae <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035b6:	e033      	b.n	8003620 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	2120      	movs	r1, #32
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fb7f 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e032      	b.n	8003638 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10c      	bne.n	80035f2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035de:	b29a      	uxth	r2, r3
 80035e0:	8a7b      	ldrh	r3, [r7, #18]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	3302      	adds	r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	e00d      	b.n	800360e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	8a7b      	ldrh	r3, [r7, #18]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4013      	ands	r3, r2
 8003602:	b2da      	uxtb	r2, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1c5      	bne.n	80035b8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4313      	orrs	r3, r2
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b9e      	ldr	r3, [pc, #632]	; (80038e8 <UART_SetConfig+0x2a8>)
 8003670:	4013      	ands	r3, r2
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003678:	430b      	orrs	r3, r1
 800367a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a93      	ldr	r2, [pc, #588]	; (80038ec <UART_SetConfig+0x2ac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	4313      	orrs	r3, r2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a8a      	ldr	r2, [pc, #552]	; (80038f0 <UART_SetConfig+0x2b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d126      	bne.n	8003718 <UART_SetConfig+0xd8>
 80036ca:	4b8a      	ldr	r3, [pc, #552]	; (80038f4 <UART_SetConfig+0x2b4>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0xd0>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0xa0>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003701 	.word	0x08003701
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	08003709 	.word	0x08003709
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e0ab      	b.n	8003850 <UART_SetConfig+0x210>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e0a7      	b.n	8003850 <UART_SetConfig+0x210>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e0a3      	b.n	8003850 <UART_SetConfig+0x210>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e09f      	b.n	8003850 <UART_SetConfig+0x210>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e09b      	b.n	8003850 <UART_SetConfig+0x210>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a76      	ldr	r2, [pc, #472]	; (80038f8 <UART_SetConfig+0x2b8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d138      	bne.n	8003794 <UART_SetConfig+0x154>
 8003722:	4b74      	ldr	r3, [pc, #464]	; (80038f4 <UART_SetConfig+0x2b4>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d82d      	bhi.n	800378c <UART_SetConfig+0x14c>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0xf8>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800376d 	.word	0x0800376d
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800378d 	.word	0x0800378d
 8003744:	0800378d 	.word	0x0800378d
 8003748:	0800377d 	.word	0x0800377d
 800374c:	0800378d 	.word	0x0800378d
 8003750:	0800378d 	.word	0x0800378d
 8003754:	0800378d 	.word	0x0800378d
 8003758:	08003775 	.word	0x08003775
 800375c:	0800378d 	.word	0x0800378d
 8003760:	0800378d 	.word	0x0800378d
 8003764:	0800378d 	.word	0x0800378d
 8003768:	08003785 	.word	0x08003785
 800376c:	2300      	movs	r3, #0
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e06d      	b.n	8003850 <UART_SetConfig+0x210>
 8003774:	2302      	movs	r3, #2
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e069      	b.n	8003850 <UART_SetConfig+0x210>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e065      	b.n	8003850 <UART_SetConfig+0x210>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e061      	b.n	8003850 <UART_SetConfig+0x210>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e05d      	b.n	8003850 <UART_SetConfig+0x210>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <UART_SetConfig+0x2bc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d125      	bne.n	80037ea <UART_SetConfig+0x1aa>
 800379e:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <UART_SetConfig+0x2b4>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d016      	beq.n	80037da <UART_SetConfig+0x19a>
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d818      	bhi.n	80037e2 <UART_SetConfig+0x1a2>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d00a      	beq.n	80037ca <UART_SetConfig+0x18a>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d814      	bhi.n	80037e2 <UART_SetConfig+0x1a2>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <UART_SetConfig+0x182>
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d008      	beq.n	80037d2 <UART_SetConfig+0x192>
 80037c0:	e00f      	b.n	80037e2 <UART_SetConfig+0x1a2>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c8:	e042      	b.n	8003850 <UART_SetConfig+0x210>
 80037ca:	2302      	movs	r3, #2
 80037cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d0:	e03e      	b.n	8003850 <UART_SetConfig+0x210>
 80037d2:	2304      	movs	r3, #4
 80037d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d8:	e03a      	b.n	8003850 <UART_SetConfig+0x210>
 80037da:	2308      	movs	r3, #8
 80037dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e0:	e036      	b.n	8003850 <UART_SetConfig+0x210>
 80037e2:	2310      	movs	r3, #16
 80037e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e8:	e032      	b.n	8003850 <UART_SetConfig+0x210>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a3f      	ldr	r2, [pc, #252]	; (80038ec <UART_SetConfig+0x2ac>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d12a      	bne.n	800384a <UART_SetConfig+0x20a>
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <UART_SetConfig+0x2b4>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003802:	d01a      	beq.n	800383a <UART_SetConfig+0x1fa>
 8003804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003808:	d81b      	bhi.n	8003842 <UART_SetConfig+0x202>
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d00c      	beq.n	800382a <UART_SetConfig+0x1ea>
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d815      	bhi.n	8003842 <UART_SetConfig+0x202>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <UART_SetConfig+0x1e2>
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d008      	beq.n	8003832 <UART_SetConfig+0x1f2>
 8003820:	e00f      	b.n	8003842 <UART_SetConfig+0x202>
 8003822:	2300      	movs	r3, #0
 8003824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003828:	e012      	b.n	8003850 <UART_SetConfig+0x210>
 800382a:	2302      	movs	r3, #2
 800382c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003830:	e00e      	b.n	8003850 <UART_SetConfig+0x210>
 8003832:	2304      	movs	r3, #4
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003838:	e00a      	b.n	8003850 <UART_SetConfig+0x210>
 800383a:	2308      	movs	r3, #8
 800383c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003840:	e006      	b.n	8003850 <UART_SetConfig+0x210>
 8003842:	2310      	movs	r3, #16
 8003844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003848:	e002      	b.n	8003850 <UART_SetConfig+0x210>
 800384a:	2310      	movs	r3, #16
 800384c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a25      	ldr	r2, [pc, #148]	; (80038ec <UART_SetConfig+0x2ac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	f040 808a 	bne.w	8003970 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800385c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003860:	2b08      	cmp	r3, #8
 8003862:	d824      	bhi.n	80038ae <UART_SetConfig+0x26e>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0x22c>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003891 	.word	0x08003891
 8003870:	080038af 	.word	0x080038af
 8003874:	08003899 	.word	0x08003899
 8003878:	080038af 	.word	0x080038af
 800387c:	0800389f 	.word	0x0800389f
 8003880:	080038af 	.word	0x080038af
 8003884:	080038af 	.word	0x080038af
 8003888:	080038af 	.word	0x080038af
 800388c:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe fce6 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003894:	61f8      	str	r0, [r7, #28]
        break;
 8003896:	e010      	b.n	80038ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <UART_SetConfig+0x2c0>)
 800389a:	61fb      	str	r3, [r7, #28]
        break;
 800389c:	e00d      	b.n	80038ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe fc47 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80038a2:	61f8      	str	r0, [r7, #28]
        break;
 80038a4:	e009      	b.n	80038ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	61fb      	str	r3, [r7, #28]
        break;
 80038ac:	e005      	b.n	80038ba <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 810b 	beq.w	8003ad8 <UART_SetConfig+0x498>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d305      	bcc.n	80038de <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d912      	bls.n	8003904 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e4:	e0f8      	b.n	8003ad8 <UART_SetConfig+0x498>
 80038e6:	bf00      	nop
 80038e8:	efff69f3 	.word	0xefff69f3
 80038ec:	40008000 	.word	0x40008000
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004800 	.word	0x40004800
 8003900:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2200      	movs	r2, #0
 8003908:	461c      	mov	r4, r3
 800390a:	4615      	mov	r5, r2
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	022b      	lsls	r3, r5, #8
 8003916:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800391a:	0222      	lsls	r2, r4, #8
 800391c:	68f9      	ldr	r1, [r7, #12]
 800391e:	6849      	ldr	r1, [r1, #4]
 8003920:	0849      	lsrs	r1, r1, #1
 8003922:	2000      	movs	r0, #0
 8003924:	4688      	mov	r8, r1
 8003926:	4681      	mov	r9, r0
 8003928:	eb12 0a08 	adds.w	sl, r2, r8
 800392c:	eb43 0b09 	adc.w	fp, r3, r9
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800393e:	4650      	mov	r0, sl
 8003940:	4659      	mov	r1, fp
 8003942:	f7fc fc43 	bl	80001cc <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4613      	mov	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003954:	d308      	bcc.n	8003968 <UART_SetConfig+0x328>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395c:	d204      	bcs.n	8003968 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e0b7      	b.n	8003ad8 <UART_SetConfig+0x498>
        }
        else
        {
          ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800396e:	e0b3      	b.n	8003ad8 <UART_SetConfig+0x498>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	d15e      	bne.n	8003a38 <UART_SetConfig+0x3f8>
  {
    switch (clocksource)
 800397a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397e:	2b08      	cmp	r3, #8
 8003980:	d827      	bhi.n	80039d2 <UART_SetConfig+0x392>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0x348>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039b5 	.word	0x080039b5
 8003990:	080039bd 	.word	0x080039bd
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039c3 	.word	0x080039c3
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe fc58 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 80039b0:	61f8      	str	r0, [r7, #28]
        break;
 80039b2:	e014      	b.n	80039de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7fe fc6a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 80039b8:	61f8      	str	r0, [r7, #28]
        break;
 80039ba:	e010      	b.n	80039de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <UART_SetConfig+0x4b4>)
 80039be:	61fb      	str	r3, [r7, #28]
        break;
 80039c0:	e00d      	b.n	80039de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7fe fbb5 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80039c6:	61f8      	str	r0, [r7, #28]
        break;
 80039c8:	e009      	b.n	80039de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ce:	61fb      	str	r3, [r7, #28]
        break;
 80039d0:	e005      	b.n	80039de <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d079      	beq.n	8003ad8 <UART_SetConfig+0x498>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005a      	lsls	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	d916      	bls.n	8003a30 <UART_SetConfig+0x3f0>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d212      	bcs.n	8003a30 <UART_SetConfig+0x3f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f023 030f 	bic.w	r3, r3, #15
 8003a12:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	8afb      	ldrh	r3, [r7, #22]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	8afa      	ldrh	r2, [r7, #22]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e053      	b.n	8003ad8 <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a36:	e04f      	b.n	8003ad8 <UART_SetConfig+0x498>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d828      	bhi.n	8003a92 <UART_SetConfig+0x452>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0x408>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a75 	.word	0x08003a75
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003a93 	.word	0x08003a93
 8003a58:	08003a83 	.word	0x08003a83
 8003a5c:	08003a93 	.word	0x08003a93
 8003a60:	08003a93 	.word	0x08003a93
 8003a64:	08003a93 	.word	0x08003a93
 8003a68:	08003a8b 	.word	0x08003a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe fbf8 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003a70:	61f8      	str	r0, [r7, #28]
        break;
 8003a72:	e014      	b.n	8003a9e <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a74:	f7fe fc0a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003a78:	61f8      	str	r0, [r7, #28]
        break;
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <UART_SetConfig+0x4b4>)
 8003a7e:	61fb      	str	r3, [r7, #28]
        break;
 8003a80:	e00d      	b.n	8003a9e <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a82:	f7fe fb55 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003a86:	61f8      	str	r0, [r7, #28]
        break;
 8003a88:	e009      	b.n	8003a9e <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8e:	61fb      	str	r3, [r7, #28]
        break;
 8003a90:	e005      	b.n	8003a9e <UART_SetConfig+0x45e>
      default:
        pclk = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d019      	beq.n	8003ad8 <UART_SetConfig+0x498>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085a      	lsrs	r2, r3, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	441a      	add	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d908      	bls.n	8003ad2 <UART_SetConfig+0x492>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d204      	bcs.n	8003ad2 <UART_SetConfig+0x492>
      {
        huart->Instance->BRR = usartdiv;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e002      	b.n	8003ad8 <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3728      	adds	r7, #40	; 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af2:	bf00      	nop
 8003af4:	00f42400 	.word	0x00f42400

08003af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf6:	d10a      	bne.n	8003c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fd f9f3 	bl	8001034 <HAL_GetTick>
 8003c4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d10e      	bne.n	8003c7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f82a 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e020      	b.n	8003cbe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d10e      	bne.n	8003ca8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f814 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e00a      	b.n	8003cbe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	e05d      	b.n	8003d94 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d059      	beq.n	8003d94 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fd f9a8 	bl	8001034 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11b      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e042      	b.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02b      	beq.n	8003d94 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4a:	d123      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d64:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e00f      	b.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d092      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4d0d      	ldr	r5, [pc, #52]	; (8003df4 <__libc_init_array+0x38>)
 8003dc0:	4c0d      	ldr	r4, [pc, #52]	; (8003df8 <__libc_init_array+0x3c>)
 8003dc2:	1b64      	subs	r4, r4, r5
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	42a6      	cmp	r6, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	4d0b      	ldr	r5, [pc, #44]	; (8003dfc <__libc_init_array+0x40>)
 8003dce:	4c0c      	ldr	r4, [pc, #48]	; (8003e00 <__libc_init_array+0x44>)
 8003dd0:	f000 f820 	bl	8003e14 <_init>
 8003dd4:	1b64      	subs	r4, r4, r5
 8003dd6:	10a4      	asrs	r4, r4, #2
 8003dd8:	2600      	movs	r6, #0
 8003dda:	42a6      	cmp	r6, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de4:	4798      	blx	r3
 8003de6:	3601      	adds	r6, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dee:	4798      	blx	r3
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	08003e7c 	.word	0x08003e7c
 8003df8:	08003e7c 	.word	0x08003e7c
 8003dfc:	08003e7c 	.word	0x08003e7c
 8003e00:	08003e80 	.word	0x08003e80

08003e04 <memset>:
 8003e04:	4402      	add	r2, r0
 8003e06:	4603      	mov	r3, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <_init>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr

08003e20 <_fini>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr
